{
	"kruskal": {
		"prefix": "kruskal",
		"body": [
		  "class DSU{",
		  "   vector<int>parent;",
		  "   vector<int>size;",
		  "   int n;",
		  "   int comp;",
		  "   public:",
		  "   DSU(int n){",
		  "    parent.resize(n+1);",
		  "    size.resize(n+1);",
		  "    for(int i = 0; i<=n; i++){",
		  "        size[i] = 1;",
		  "        parent[i] = i;",
		  "    }",
		  "    parent[n] = 0;",
		  "    comp = n;",
		  "   }",
		  "   int get(int a){",
		  "    return (a == parent[a])?(a):(parent[a] = get(parent[a]));",
		  "   }",
		  "   void unite(int a , int b){",
		  "      a = get(a);",
		  "      b = get(b);",
		  "      if(a!=b){",
		  "        if(size[b]>=size[a])",
		  "        swap(a,b);",
		  "        size[a]+=size[b];",
		  "        parent[b] = a;",
		  "        comp--;",
		  "      }",
		  "   }",
		  "   int get_comp(){",
		  "    return comp;",
		  "   }",
		  "};",
		  "int kruskal(vector<vector<int>>&arr, vector<vector<int>>&weight){",
		  "  priority_queue<pair<int,pair<int,int>> , vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>att;",
		  "  for(int i = 0; i<arr.size(); i++){",
		  "    for(auto c: arr[i]){",
		  "      att.push({weight[i][c], {i , c}});",
		  "    }",
		  "  }",
		  "  DSU a(arr.size()+1);",
		  "  vector<int>visited(arr.size(),0);",
		  "  int ans = 0;",
		  "  vector<pair<int,int>>ans1;",
		  "  while(!att.empty()){",
		  "    auto c = att.top();",
		  "    if(a.get(c.second.first)!= a.get(c.second.second)){",
		  "      a.unite(c.second.first,c.second.second);",
		  "      ans+=c.first;",
		  "      ans1.push_back(c.second);",
		  "    }",
		  "    att.pop();",
		  "  }",
		  "  // ans1 vector contains all the edges needed for the MST.",
		  "  return ans;",
		  "}"
		],
		"description": "kruskal"
	  }
}