{
	"lca_tree": {
		"prefix": "lca_tree",
		"body": [
		  "",
		  "void dfs(int curr ,int prev ,vector<vector<int>>&arr, vector<vector<int>>&parent, int dep, vector<int>&depth){",
		  "    depth[curr] = dep;",
		  "       parent[curr][0] = prev;",
		  "        for(auto c: arr[curr]){",
		  "            if(c!=prev){",
		  "                dfs(c ,curr , arr, parent, dep+1, depth);",
		  "            }",
		  "        }",
		  "}",
		  "",
		  "void precompute(int n , vector<vector<int>>& parent){",
		  "    for(int i = 1; i<18; i++){",
		  "        for(int node = 0; node<n; node++){",
		  "            if(parent[node][i-1]!=-1){",
		  "                parent[node][i] = parent[parent[node][i-1]][i-1];",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "}",
		  "",
		  "int lca(int u  , int v , vector<int>&depth , vector<vector<int>>&parent){",
		  "    if(depth[v]<depth[u]){",
		  "        swap(u , v);",
		  "    }",
		  "    int diff = depth[v] - depth[u];",
		  "    for(int i = 0; i<18; i++){",
		  "        if((diff>>i)&1)",
		  "             v = parent[v][i];",
		  "    }",
		  "    if(u == v){",
		  "        return u;",
		  "    }",
		  "    for(int i = 17; i>=0; i--){",
		  "        if(parent[u][i]!=parent[v][i]){",
		  "            u = parent[u][i];",
		  "            v = parent[v][i];",
		  "        }",
		  "    }",
		  "    return parent[u][0];",
		  "}",
		  ""
		],
		"description": "lca_tree"
	  }
}