{
	"stronglyconnectedcomponents": {
		"prefix": "stronglyconnectedcomponents",
		"body": [
		  "void pushingtostack(vector<vector<int>>&arr, int curr ,vector<int>&visited, stack<int>&att){",
		  "    visited[curr] = 1;",
		  "    for(auto c : arr[curr]){",
		  "        if(visited[c] == 0){",
		  "            pushingtostack(arr ,c ,visited, att);",
		  "        }",
		  "    }",
		  "     att.push(curr);",
		  "}",
		  "",
		  "void pushingtostackUtill(vector<vector<int>>&arr, int curr ,vector<int>&visited, vector<int>&cycle){",
		  "    visited[curr] = 1;",
		  "    for(auto c: arr[curr]){",
		  "        if(visited[c] == 0){",
		  "            pushingtostackUtill(arr, c, visited,cycle);",
		  "        }",
		  "    }",
		  "    cycle.push_back(curr);",
		  "}",
		  "",
		  "int gettingstronglyconnectedcomponents(vector<vector<int>>&arr, int n){",
		  "    vector<int>visited(n,0);",
		  "    stack<int>att;",
		  "    for(int i = 0; i<n; i++){",
		  "        if(visited[i]==0)",
		  "          pushingtostack(arr , i , visited, att);        ",
		  "    }",
		  "    vector<vector<int>>reverse_graph(n);",
		  "    int i = 0;",
		  "    for(auto c: arr){",
		  "      for(auto d: c)",
		  "        reverse_graph[d].push_back(i);",
		  "      i++;",
		  "    }",
		  "    vector<int>visited2(n,0);",
		  "    int cnt = 0;",
		  "    vector<vector<int>>axt;",
		  "    while(!att.empty()){",
		  "        auto ele = att.top();",
		  "        att.pop();",
		  "        vector<int>cycle;",
		  "        if(visited2[ele]==0){",
		  "            cnt++;",
		  "            pushingtostackUtill(reverse_graph, ele, visited2, cycle);",
		  "        }",
		  "        // if(cycle.size()){",
		  "        //   axt.push_back(cycle);",
		  "        // }",
		  "    }",
		  "    //axt has all the strongly connected components ",
		  "    return cnt;",
		  "}",
		  ""
		],
		"description": "stronglyconnectedcomponents"
	  }
}