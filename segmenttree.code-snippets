{
	"segtree": {
		"prefix": "segtree",
		"body": [
		  "",
		  "struct segtree{",
		  "   int size;",
		  "   vector<int>sums;",
		  "   void init(int n){",
		  "    size = 1;",
		  "    while(size<n) size*=2;",
		  "    sums.assign(2*size, 0LL);",
		  "   }",
		  "   void build(vector<int>&arr,int x,int l, int r){",
		  "    if(r - l == 1){",
		  "      if(l<arr.size()){",
		  "        sums[x] = arr[l];",
		  "      }",
		  "      return;",
		  "    }",
		  "    int mid = (r+l)/2;",
		  "    build(arr,2*x+1,l,mid);",
		  "    build(arr,2*x+2,mid,r);",
		  "    sums[x] = sums[2*x+1] + sums[2*x+2];",
		  "   }",
		  "   void build(vector<int>&arr){",
		  "    build(arr,0,0,size);",
		  "   }",
		  "   int get_sum(int l, int r,int x, int lx, int rx){",
		  "    if(lx>=r || l >= rx) return 0;",
		  "    if(lx>=l && rx<=r) return sums[x];",
		  "    int mid = (lx+rx)/2;",
		  "    int a1 = get_sum(l,r,2*x+1,lx,mid);",
		  "    int a2 = get_sum(l,r,2*x+2,mid,rx);",
		  "    return a1+a2;",
		  "   }",
		  "   int get_sum(int l, int r){",
		  "      return get_sum(l,r,0,0,size);",
		  "   }",
		  "   void set(int i , int v,int x, int lx, int rx){",
		  "    if(rx - lx == 1){",
		  "      sums[x] = v;",
		  "      return;",
		  "    }",
		  "    int mid  = (lx+rx)/2;",
		  "    if(i<mid){",
		  "      set(i,v,2*x+1,lx,mid);",
		  "    }else{",
		  "      set(i,v,2*x+2,mid,rx);",
		  "    }",
		  "    sums[x] = sums[2*x+1] + sums[2*x+2];",
		  "   }",
		  "   void set(int i, int v){",
		  "    set(i,v,0,0,size);",
		  "   }",
		  "};",
		  ""
		],
		"description": "segtree"
	  }
}